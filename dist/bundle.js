(()=>{"use strict";var t=function(){function t(t,i){this.canvas=t,this.boardSize=i,this.context=t.getContext("2d")}return t.prototype.drawBoard=function(){this.boardHalfSteps=2*this.boardSize+this.boardSize-1,this.cellRadius=Math.min(this.canvas.width/((this.boardHalfSteps+1)*Math.cos(Math.PI/6)),this.canvas.height/(1.5*this.boardSize+1.5));for(var t=1;t<=this.boardSize;t++)for(var i=1;i<=this.boardSize;i++)this.drawCell(t,i)},t.prototype.drawCell=function(t,i){var a=(2*t+i)*this.cellRadius*Math.cos(Math.PI/6),h=i*this.cellRadius*1.5;this.drawHexagon(a,h)},t.prototype.drawHexagon=function(t,i){this.context.beginPath();for(var a=0;a<6;a++)this.context.lineTo(t+this.cellRadius*Math.cos((2*a-1)*Math.PI/6),i+this.cellRadius*Math.sin((2*a-1)*Math.PI/6));this.context.closePath(),this.context.stroke()},t}();window.onload=function(){var i=document.getElementById("canvas");i.width=4*i.width,i.height=4*i.height,new t(i,11).drawBoard()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFBQSxpQkFLSSxXQUE2QkEsRUFBbUNDLEdBQW5DLEtBQUFELE9BQUFBLEVBQW1DLEtBQUFDLFVBQUFBLEVBQzVEQyxLQUFLQyxRQUFVSCxFQUFPSSxXQUFXLE1BbUN6QyxPQWhDSSxZQUFBQyxVQUFBLFdBQ0lILEtBQUtJLGVBQWtDLEVBQWpCSixLQUFLRCxVQUFnQkMsS0FBS0QsVUFBWSxFQUM1REMsS0FBS0ssV0FBYUMsS0FBS0MsSUFDbkJQLEtBQUtGLE9BQU9VLFFBQVVSLEtBQUtJLGVBQWlCLEdBQUtFLEtBQUtHLElBQUlILEtBQUtJLEdBQUssSUFDcEVWLEtBQUtGLE9BQU9hLFFBQTJCLElBQWpCWCxLQUFLRCxVQUFrQixNQUdqRCxJQUFLLElBQUlhLEVBQUksRUFBR0EsR0FBS1osS0FBS0QsVUFBV2EsSUFDakMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEdBQUtiLEtBQUtELFVBQVdjLElBQ2pDYixLQUFLYyxTQUFTRixFQUFHQyxJQUs3QixZQUFBQyxTQUFBLFNBQVNGLEVBQVlDLEdBQ2pCLElBQU1FLEdBQWMsRUFBSkgsRUFBUUMsR0FBS2IsS0FBS0ssV0FBYUMsS0FBS0csSUFBSUgsS0FBS0ksR0FBSyxHQUM1RE0sRUFBU0gsRUFBSWIsS0FBS0ssV0FBYSxJQUNyQ0wsS0FBS2lCLFlBQVlGLEVBQVFDLElBRzdCLFlBQUFDLFlBQUEsU0FBWUwsRUFBWUMsR0FDcEJiLEtBQUtDLFFBQVFpQixZQUNiLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRW5CbkIsS0FBS0MsUUFBUW1CLE9BQ1JSLEVBQUlaLEtBQUtLLFdBQWFDLEtBQUtHLEtBQVUsRUFBSlUsRUFBUyxHQUFLYixLQUFLSSxHQUFLLEdBQ3pERyxFQUFJYixLQUFLSyxXQUFhQyxLQUFLZSxLQUFVLEVBQUpGLEVBQVMsR0FBS2IsS0FBS0ksR0FBSyxJQUdsRVYsS0FBS0MsUUFBUXFCLFlBQ2J0QixLQUFLQyxRQUFRc0IsVUFFckIsRUF6Q0EsR0NZQUMsT0FBT0MsT0FWUCxXQUNJLElBQUkzQixFQUE0QjRCLFNBQVNDLGVBQWUsVUFDeEQ3QixFQUFPVSxNQUF1QixFQUFmVixFQUFPVSxNQUN0QlYsRUFBT2EsT0FBeUIsRUFBaEJiLEVBQU9hLE9BR04sSUFBSWlCLEVBQWdCOUIsRUFGeEIsSUFHSkssYyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleF9vbmxpbmUvLi9zcmMvaGV4Qm9hcmREaXNwbGF5LnRzIiwid2VicGFjazovL2hleF9vbmxpbmUvLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSGV4Qm9hcmREaXNwbGF5IHtcbiAgICBwcml2YXRlIGNvbnRleHQgOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gICAgcHJpdmF0ZSBib2FyZEhhbGZTdGVwcyA6IG51bWJlcjtcbiAgICBwcml2YXRlIGNlbGxSYWRpdXMgOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNhbnZhcyA6IEhUTUxDYW52YXNFbGVtZW50LCBwdWJsaWMgYm9hcmRTaXplIDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgfVxuXG4gICAgZHJhd0JvYXJkKCkgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ib2FyZEhhbGZTdGVwcyA9IHRoaXMuYm9hcmRTaXplICogMiArIHRoaXMuYm9hcmRTaXplIC0gMTtcbiAgICAgICAgdGhpcy5jZWxsUmFkaXVzID0gTWF0aC5taW4oXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvICgodGhpcy5ib2FyZEhhbGZTdGVwcyArIDEpICogTWF0aC5jb3MoTWF0aC5QSSAvIDYpKSxcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvICh0aGlzLmJvYXJkU2l6ZSAqIDEuNSArIDEuNSlcbiAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGxldCB4ID0gMTsgeCA8PSB0aGlzLmJvYXJkU2l6ZTsgeCsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMTsgeSA8PSB0aGlzLmJvYXJkU2l6ZTsgeSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2VsbCh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXdDZWxsKHggOiBudW1iZXIsIHkgOiBudW1iZXIpIDogdm9pZCB7XG4gICAgICAgIGNvbnN0IHhQaXhlbCA9ICh4ICogMiArIHkpICogdGhpcy5jZWxsUmFkaXVzICogTWF0aC5jb3MoTWF0aC5QSSAvIDYpO1xuICAgICAgICBjb25zdCB5UGl4ZWwgPSB5ICogdGhpcy5jZWxsUmFkaXVzICogMS41O1xuICAgICAgICB0aGlzLmRyYXdIZXhhZ29uKHhQaXhlbCwgeVBpeGVsKTtcbiAgICB9XG5cbiAgICBkcmF3SGV4YWdvbih4IDogbnVtYmVyLCB5IDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBUcnVzdCBtZSB0aGlzIGRyYXdzIGEgaGV4YWdvbi4gVGhlIC0xIGNvbnN0YW50IGlzIHRvIGdldCB0aGUgcG9pbnR5IHNpZGUgdXAgcmF0aGVyIHRoYW4gZmxhdCBzaWRlIHVwLlxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVUbyhcbiAgICAgICAgICAgICAgICAoeCArIHRoaXMuY2VsbFJhZGl1cyAqIE1hdGguY29zKCgoaSAqIDIpIC0gMSkgKiBNYXRoLlBJIC8gNikpLFxuICAgICAgICAgICAgICAgICh5ICsgdGhpcy5jZWxsUmFkaXVzICogTWF0aC5zaW4oKChpICogMikgLSAxKSAqIE1hdGguUEkgLyA2KSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtIZXhCb2FyZERpc3BsYXl9IGZyb20gJy4vaGV4Qm9hcmREaXNwbGF5J1xuXG5mdW5jdGlvbiBtYWluKCkge1xuICAgIGxldCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoICogNDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodCAqIDQ7XG4gICAgY29uc3Qgc2l6ZSA9IDExO1xuXG4gICAgY29uc3QgaGV4Qm9hcmQgPSBuZXcgSGV4Qm9hcmREaXNwbGF5KGNhbnZhcywgc2l6ZSk7XG4gICAgaGV4Qm9hcmQuZHJhd0JvYXJkKCk7XG59XG5cbndpbmRvdy5vbmxvYWQgPSBtYWluO1xuIl0sIm5hbWVzIjpbImNhbnZhcyIsImJvYXJkU2l6ZSIsInRoaXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImRyYXdCb2FyZCIsImJvYXJkSGFsZlN0ZXBzIiwiY2VsbFJhZGl1cyIsIk1hdGgiLCJtaW4iLCJ3aWR0aCIsImNvcyIsIlBJIiwiaGVpZ2h0IiwieCIsInkiLCJkcmF3Q2VsbCIsInhQaXhlbCIsInlQaXhlbCIsImRyYXdIZXhhZ29uIiwiYmVnaW5QYXRoIiwiaSIsImxpbmVUbyIsInNpbiIsImNsb3NlUGF0aCIsInN0cm9rZSIsIndpbmRvdyIsIm9ubG9hZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJIZXhCb2FyZERpc3BsYXkiXSwic291cmNlUm9vdCI6IiJ9